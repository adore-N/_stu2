1.深入响应式原理
    vue最独特的特性之一: 是其非侵入式的响应式系统,数据模型通过普通的JavaScript队形,当你修改时,页面视图就会进行更新

    它是如何追踪变化的?
        当把一个JavaScript对象传入到vue实例作为data选项,vue将遍历此对象的所有属性,并使用object.defineProperty,
        把这些属性全部转为getter/setter,并且object.defineProperty是ES5中的shim的特性,这就是vue不支持IE8以及
        低版本的浏览器的原因

        setter/getter是对用户来说不可见的,但是在内部他们让vue能够追踪依赖,在属性被访问和修改时通知变更.
        每个组件实例对应一个watcher实例,它会在组件渲染的过程中把接触过的数据属性记录为依赖,之后在依赖项的
        setter触发时,会通知watcher,从而时它关联的组件重新渲染

        注意事项: vue无法检测到对象属性的添加或删除,由于在初始化实例时对属性执行getter/setter转化,所以在
        data对象存在才能让vue将它转化为响应式的

        解决方案: 可以使用vue.set(obj,protertyName,value)方法向嵌套对象添加响应式属性

2.vue的双向绑定原理
    数据绑定我的理解就是让数据(model)展示到视图(view)上,常见的架构模式有MVC,MVVM等
    
    像vue采用的是数据劫持与发布订阅结合的方式来实现双向绑定,数据劫持主要通过object.definedProperty来实现
        var modeng = {}
        var age;
        Object.defineProperty(modeng, 'age', {
        get: function () {
            console.log("获取年龄");
            return age;
        },
        set: function (newVal) {
            console.log("设置年龄");
            age = newVal;
        }
        });
        modeng.age = 18;
        console.log(modeng.age);
    我们在访问age属性会自动执行get属性,设置age属性时,会自动执行set函数

    MVVM模式: 在于数据与视图的保持同步,也就说在数据改变的时会自动的更新视图,视图发生变化时会更新数据 

    如何检测到数据以及视图的变化,来更新数据,则需要利用事件的监听,利用object.defineProperty,当我们的属性
    发生变化时,就会自动触发set函数,从而能够给通知我们去更新视图

    实现: 我们知道vue是通过数据劫持结合发布订阅模式来实现双向绑定的,我们也知道数据劫持是通过object.defineProperty
          方法,当知道这些,就需要一个监听器observer来监听属性的变化,得知属性变化之后我们需要一个watcher订阅者来更新视图,
          同时还需要一个compile指令解析器,用来解析我们的节点元素的指令与初始化视图
          
        Observer 监听器：用来监听属性的变化通知订阅者
        Watcher 订阅者：收到属性的变化，然后更新视图
        Compile 解析器：解析指令，初始化模版，绑定订阅者







