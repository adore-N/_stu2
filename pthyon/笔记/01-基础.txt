数据类型
    整数 浮点数 字符串

    转义字符: 转义字符 \ 可以转义很多字符,\n 换行 
            
    r" 表示''内部的字符默认不转义
    '''...''' 的格式表示多行内容

    布尔值: True | False 
           可以使用 and or not 计算  与 或 非 

    空值: None 

    变量: 
        变量的类型不固定的语言称之为动态语言,与之对应的是静态语言
        静态语言: 定义变量的时必须指定变量类型,如果赋值类型不匹配,就会报错\
        int a= 123
    
    常量: 通常全部大写的表示常量

    除法: 
        / 除法计算的结果是浮点数,即使是两个整数整除,结果也是浮点数
        // 称为地板除 两个整数的除法仍是整数 10 // 3 = 3
    
    字符串: ord()函数获取字符串的整数表示  chr()函数把编码转换为对应的字符


列表: 
    list: 有序的集合,可以随时删除,添加其中的元素

        len()函数可以获取list元素的个数
        append() 末尾添加
        pop(num)   末尾删除    num: 指定删除索引位置

    tuple: 有序列表,元组  一旦初始化就不能修改
           空 t= ()
           有一个元素  t = (1,) 消除分歧 

条件判断
    if 语句有一个特点,从上往下判断,如果某个判断是true,执行该语句之后,就忽略剩下的语句

    条件判断从上向下匹配，当满足条件时执行对应的块内语句，后续的elif和else都不再执行。


循环: 
    for in 循环.依次把 list 或 tuple 中的每一个元素迭代出来

    range()函数,可以生成一个整数序列,比如range(5)生成的序列是从0开始小于5的整数

    while 循环,只要满足情况,就不断循环,

    break: 在循环中,break语句可以提前退出循环

    continue: 跳过本次循环,直接下一次循环

    break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。

    要特别注意，不要滥用break和continue语句。
    break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句


dict:
    python内置字典: dict的支持,dict全程dictionary,在其他语言称为map,使用键值对存储

    d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
    d['Bob'] = 75

    判断key值是否存在
        >>>'Tom' in d 
        False

        >>>d.get('Tom')
        False

    删除一个key
    d.pop('Bob')

和list比较，dict有以下几个特点：

    查找和插入的速度极快，不会随着key的增加而变慢；
    需要占用大量的内存，内存浪费多。

而list相反：

    查找和插入的时间随着元素的增加而增加；
    占用空间小，浪费内存很少。
    所以，dict是用空间来换取时间的一种方法。

set: set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

    要创建一个set，需要提供一个list作为输入集合：
    >>> s = set([1, 2, 3])
    >>> s
    {1, 2, 3}

    重复元素在set中自动被过滤：

    通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：

    通过remove(key)方法可以删除元素

    >>> s1 = set([1, 2, 3])
    >>> s2 = set([2, 3, 4])
    >>> s1 & s2
    {2, 3}
    >>> s1 | s2
    {1, 2, 3, 4}